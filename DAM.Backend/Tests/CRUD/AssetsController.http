### Get all asset IDs for a product
GET {{baseUrl}}/assets/{{defaultProductIds[0]}}/all
Accept: application/json

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}

### Get total number of assets for a product
GET {{baseUrl}}/assets/{{defaultProductIds[0]}}/amount
Accept: application/json

> {% client.test("Status 200 and has amount", function() { client.assert(response.status === 200, "Response status is 200"); client.assert(response.body.hasOwnProperty('amount'), "Response has 'amount'"); }); %}

### Get image from product by priority
GET {{baseUrl}}/assets/{{defaultProductIds[0]}}/1
Accept: application/json

> {% client.test("Status 200 or 404", function() { client.assert([200,404].includes(response.status), "Response status is 200 or 404"); }); %}

### Create a new image
POST {{baseUrl}}/assets
Content-Type: application/json

{
  "name": "Test Image",
  "description": "Test description",
  "tags": ["test"],
  "data": "base64string=="
}

> {% client.test("Status 200 or 201", function() { client.assert([200,201].includes(response.status), "Response status is 200 or 201"); }); %}

### Add image to product
POST {{baseUrl}}/assets/{{defaultProductIds[0]}}/add
Content-Type: application/json

{
  "imageId": "{{defaultProductIds[1]}}",
  "priority": 1
}

> {% client.test("Status 200 or 201", function() { client.assert([200,201].includes(response.status), "Response status is 200 or 201"); }); %}

### Remove image from product
POST {{baseUrl}}/assets/{{defaultProductIds[0]}}/remove
Content-Type: application/json

{
  "imageId": "{{defaultProductIds[1]}}"
}

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}

### Update image by ID
PUT {{baseUrl}}/assets/{{defaultProductIds[1]}}
Content-Type: application/json

{
  "name": "Updated Name",
  "description": "Updated description"
}

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}

### Patch image by ID
PATCH {{baseUrl}}/assets/{{defaultProductIds[1]}}
Content-Type: application/json-patch+json

[
  { "op": "replace", "path": "/name", "value": "Patched Name" }
]

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}

### Patch product-image relationship
PATCH {{baseUrl}}/assets/{{defaultProductIds[0]}}/{{defaultProductIds[1]}}
Content-Type: application/json-patch+json

[
  { "op": "replace", "path": "/priority", "value": 2 }
]

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}

### Delete image from product
DELETE {{baseUrl}}/assets/{{defaultProductIds[0]}}/{{defaultProductIds[1]}}

> {% client.test("Status 200 or 204", function() { client.assert([200,204].includes(response.status), "Response status is 200 or 204"); }); %}

### Delete image by ID
DELETE {{baseUrl}}/assets/{{defaultProductIds[1]}}

> {% client.test("Status 200 or 204", function() { client.assert([200,204].includes(response.status), "Response status is 200 or 204"); }); %}

### Get paginated image IDs
GET {{baseUrl}}/assets/imageIdPile?size=5&page=0
Accept: application/json

> {% client.test("Status 200 and array", function() { client.assert(response.status === 200, "Response status is 200"); client.assert(Array.isArray(response.body), "Response is array"); }); %}

### Get paginated image IDs from search
GET {{baseUrl}}/assets/imageIdPileFromSearch?size=5&page=0&searchquery=test
Accept: application/json

> {% client.test("Status 200 and array", function() { client.assert(response.status === 200, "Response status is 200"); client.assert(Array.isArray(response.body), "Response is array"); }); %}

### Get image by UUID
GET {{baseUrl}}/assets/getImageByUUID?uuid={{defaultProductIds[1]}}
Accept: application/json

> {% client.test("Status 200 or 404", function() { client.assert([200,404].includes(response.status), "Response status is 200 or 404"); }); %}

### Get product gallery
GET {{baseUrl}}/assets/{{defaultProductIds[0]}}/gallery
Accept: application/json

> {% client.test("Status 200 and array", function() { client.assert(response.status === 200, "Response status is 200"); client.assert(Array.isArray(response.body), "Response is array"); }); %}

### Delete all images (testing endpoint)
POST {{baseUrl}}/assets/delete-all

> {% client.test("Status 200", function() { client.assert(response.status === 200, "Response status is 200"); }); %}
