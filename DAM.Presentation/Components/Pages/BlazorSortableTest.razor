@page "/dam/test"
@attribute [StreamRendering]
@rendermode  InteractiveServer
@inject NavigationManager NavigationManager
@using BlazorSortableList
@using Models

<SortableList Group="sharedLists" Items="items1" Context="item" 
              OnRemove="ListOneRemove" OnUpdate="ListOneReorder">
    <SortableItemTemplate>
        <div class="card has-border has-background-white">
            <p class="is-size-4 p-2 ml-4">@item.Name</p>
        </div>
    </SortableItemTemplate>
</SortableList>

<br/>

<SortableList Group="sharedLists" Items="items2" Context="item" 
              OnRemove="ListTwoRemove" OnUpdate="ListTwoReorder">
    <SortableItemTemplate>
        <div class="card has-background-white has-border">
            <p class="is-size-4 p-2 ml-4">@item.Name</p>
        </div>
    </SortableItemTemplate>
</SortableList>

@code
{
    class Item
    {
        public string Name { get; set; }
    }
    
    List<Item> items1, items2;

    protected override void OnInitialized ()
    {
        items1 = [];

        for (int i = 1 ; i <= 10 ; i++)
        {
            items1.Add(new Item()
            {
                Name = ("Item #" + i)
            });
        }
        
        items2 = [];

        for (int i = 11 ; i <= 20 ; i++)
        {
            items2.Add(new Item()
            {
                Name = ("Item #" + i)
            });
        }
        
    }
    
    private void ListOneRemove((int oldIndex, int newIndex) indices)
    {
        // get the item at the old index in list 1
        var item = items1[indices.oldIndex];

        // add it to the new index in list 2
        items2.Insert(indices.newIndex, item);

        // remove the item from the old index in list 1
        items1.Remove(items1[indices.oldIndex]);
    }

    private void ListTwoRemove((int oldIndex, int newIndex) indices)
    {
        // get the item at the old index in list 2
        var item = items2[indices.oldIndex];

        // add it to the new index in list 1
        items1.Insert(indices.newIndex, item);

        // remove the item from the old index in list 2
        items2.Remove(items2[indices.oldIndex]);
    }
    
    private void ListOneReorder((int oldIndex, int newIndex) indices)
    {
        // Get the item being moved
        var item = items1[indices.oldIndex];
    
        // Remove from old position
        items1.RemoveAt(indices.oldIndex);
    
        // Insert at new position
        items1.Insert(indices.newIndex, item);
    }

    private void ListTwoReorder((int oldIndex, int newIndex) indices)
    {
        // Get the item being moved
        var item = items2[indices.oldIndex];
    
        // Remove from old position
        items2.RemoveAt(indices.oldIndex);
    
        // Insert at new position
        items2.Insert(indices.newIndex, item);
    }
}
